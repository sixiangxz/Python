hello刘江的博客教程
博客
Python教程
Django教程
数据分析教程
视频教程
登录
《Django REST framework 入门到精通》视频课程上线了，全网稀缺资源，深度源码剖析，进阶高手之路！点击链接查看详情

Python教程
Python简介
Python环境搭建
pip的安装和使用
virtualenv 虚拟环境
代码编辑器
帮助文档
编译器与解释器
“Hello World！”
基础知识
基础语法
变量与常量
运算符
输入输出
数据类型
数字类型
布尔类型
列表
元组
字符串
字典
bytes
集合set
流程控制
顺序执行
条件判断
循环控制
函数
函数基础
参数类型
变量作用域
range()函数
递归函数
匿名函数
推导式
迭代器
生成器
装饰器
内置函数
文件读写
面向对象编程
类和实例
封装、继承和多态
成员保护和访问限制
@property装饰器
特殊成员和魔法方法
reflect反射
异常处理
调试和测试
模块与包
常用标准库
os
sys
subprocess
random
bisect
hashlib
queue
fileinput
shutil
zipfile
tarfile
getpass
json
pickle
shelve
time
datetime
timeit
logging
正则表达式
正则表达式语法
re模块
网络编程
socket编程
socketserver编程
多线程与多进程
多线程threading
生产者消费者模式
线程池
多进程multiprocess
协程与异步IO
字符串
阅读: 9769     评论：9
字符串是Python中最常用的数据类型之一，使用单引号或双引号来创建字符串，使用三引号创建多行字符串。字符串要么使用两个单引号，要么两个双引号，不能一单一双！Python不支持单字符类型，单字符在Python中也是作为一个字符串使用。

字符串是不可变的序列数据类型，不能直接修改字符串本身，和数字类型一样！Python3全面支持Unicode编码，所有的字符串都是Unicode字符串，所以传统Python2存在的编码问题不再困扰我们，可以放心大胆的使用中文。

>>> var1 = 'Hello World!'
>>> var2 = "Jack"
>>> var3 = ""                   # 空字符串
>>> var4 = "it's apple"         # 双引号中可以嵌套单引号
>>> var5 = 'This is "PLANE"!'   # 单引号中可以嵌套双引号
>>> var6 = 'what is 'your'name'
SyntaxError: invalid syntax
但是单引号嵌套单引号或者双引号嵌套双引号就会出现歧义。

>>> a = "haha"
>>> b = a
>>> a = "xixi"
>>> a is b
False
>>> a[1] = "z"
Traceback (most recent call last):
  File "<pyshell#70>", line 1, in <module>
    a[1] = "z"
TypeError: 'str' object does not support item assignment
虽然字符串本身不可变，但可以像列表序列一样，通过方括号加下标的方式，访问或者获取它的子串，当然也包括切片操作。这一切都不会修改字符串本身，当然也符合字符串不可变的原则。

>>> s = "hello world!"
>>> s[4]
'o'
>>> s[2:6]
'llo '
>>> s
'hello world!'
字符串的运算：
下表实例变量a值为字符串 "Hello"，b变量值为 "Python"：

操作	描述	操作	结果
+	字符串连接(运算速度慢，慎用)	a + b	'HelloPython'
*	重复输出字符串，相当于乘法	a * 2	'HelloHello'
[]	通过索引获取字符串中的字符	a[1]	'e'
[ : ]	截取字符串中的一部分，切片	a[1:4]	'ell'
in	成员运算符 - 如果字符串中包含给定的字符返回 True	"H" in a	True
not in	成员运算符 - 如果字符串中不包含给定的字符返回 True	"M" not in a	True
r/R	原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母"r"（可以大小写）以外，与普通字符串有着几乎完全相同的语法。	print(r'\n')	\n
Python转义字符：
编程语言里，有很多特殊字符，它们起着各种各样的作用。有些特殊字符没有办法用普通字符表示，需要进行转义。python用反斜杠(\)转义字符。如下表：

转义字符	描述
\(在行尾时)	续行符
\\	反斜杠符号
\'	单引号
\"	双引号
\a	响铃
\b	退格(Backspace)
\e	转义
\000	空
\n	换行
\v	纵向制表符
\t	横向制表符
\r	回车
\f	换页
\oyy	八进制数，yy代表的字符，例如：\o12代表换行
\xyy	十六进制数，yy代表的字符，例如：\x0a代表换行
\033	颜色控制
“多行字符串”
前面我们介绍过，在函数和类的紧后面可以用三引号添加doc说明。

在字符串中，可以使用三引号（三单或三双引号都可以）编写跨行字符串，在其中可以包含换行符、制表符以及其他特殊字符。例如：

errHTML = '''
<HTML><HEAD><TITLE>
Friends CGI Demo</TITLE></HEAD>
<BODY><H3>ERROR</H3>
<B>%s</B><P>
<FORM><INPUT TYPE=button VALUE=Back
ONCLICK="window.history.back()"></FORM>
</BODY></HTML>
'''
----------------------------------
cursor.execute('''
CREATE TABLE users (
login VARCHAR(8),
uid INTEGER,
prid INTEGER)
''')
上面的errHTML是一个封装了HTML代码的字符串，而cursor.execute则执行了一个创建users表的SQL语句。多行字符串本质上和普通字符串没有区别，但是将我们从引号和特殊字符串的泥潭里面解脱出来了，在编写、排版、查看、维护上更人性化。

字符串内置方法
方法	描述
string.capitalize()	把字符串的第一个字符大写
string.center(width)	返回一个原字符串居中,并使用空格填充至长度width的新字符串
string.count(str, beg=0, end=len(string))	返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数
bytes.decode(encoding='UTF-8', errors='strict')	Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象
string.encode(encoding='UTF-8', errors='strict')	以 encoding 指定的编码格式编码 string，编码的结果是一个bytes对象。如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'
string.endswith(obj, beg=0, end=len(string))	检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.
string.expandtabs(tabsize=8)	把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。
string.find(str, beg=0, end=len(string))	检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1
string.format()	格式化字符串
string.index(str, beg=0, end=len(string))	跟find()方法一样，只不过如果str不在 string中会报一个异常.
string.isalnum()	如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回False
string.isalpha()	如果 string 至少有一个字符并且所有字符都是字母则返回True,否则返回False
string.isdecimal()	如果 string 只包含十进制数字则返回 True 否则返回 False.
string.isdigit()	如果 string 只包含数字则返回 True 否则返回 False.
string.islower()	如果string中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回True，否则返回False
string.isnumeric()	如果string中只包含数字字符，则返回True，否则返回False
string.isspace()	如果 string 中只包含空格，则返回 True，否则返回 False.
string.istitle()	如果 string 是标题化的(见 title())则返回 True，否则返回 False
string.isupper()	如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
string.join(seq)	以string作为分隔符，将seq中所有的元素(的字符串表示)合并为一个新的字符串
string.ljust(width)	返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串
string.lower()	转换 string 中所有大写字符为小写.
string.lstrip()	截掉 string 左边的空格
string.maketrans(intab, outtab)	maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
max(str)	返回字符串 str 中最大的字母。
min(str)	返回字符串 str 中最小的字母。
string.partition(str)	有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.
string.replace(str1, str2, num=string.count(str1))	把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.
string.rfind(str, beg=0,end=len(string))	类似于find()函数，不过是从右边开始查找.
string.rindex( str, beg=0,end=len(string))	类似于 index()，不过是从右边开始.
string.rjust(width)	返回一个原字符串右对齐,并使用空格填充至长度width的新字符串
string.rpartition(str)	类似于 partition()函数,不过是从右边开始查找.
string.rstrip()	删除 string 字符串末尾的空格.
string.split(str="", num=string.count(str))	以str为分隔符切片 string，如果 num有指定值，则仅分隔num个子字符串
string.splitlines([keepends])	按照行('\r','\r\n',\n')分隔，返回一个包含各行作为元素的列表，如果参数keepends为False，不包含换行符，如果为True，则保留换行符。
string.startswith(obj, beg=0,end=len(string))	检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.
string.strip([obj])	在 string 上执行 lstrip()和 rstrip()
string.swapcase()	翻转 string 中的大小写
string.title()	返回"标题化"的string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())
string.translate(str, del="")	根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中
string.upper()	转换 string 中的小写字母为大写
string.zfill(width)	返回长度为 width 的字符串，原字符串 string右对齐，前面填充0
字符串是Python中和列表、字典同样重要的数据类型，对它的操作特别多，因此内置了很多方法。每当你要处理字符串的时候，不妨来这里查查，或许就有原生的方法，不用你自己去写了。

对字符串的操作方法那么多，是不是需要每个都背下来呢？能背最好，背不了的话至少需要知道下面几个：

*　encode() # 编码成bytes类型

*　find() # 查找子串

*　index() # 获取下标

*　replace() # 替换子串

*　len(string) # 返回字符串长度，Python内置方法，非字符串方法。

*　lower() # 小写字符

*　upper() # 大写字符

*　split() # 分割字符串

*　strip() # 去除两端的指定符号

*　startswith() # 字符串是否以xxx开头

*　endswith() # 字符串是否以xxx结尾

str.format()格式化方法
前面说过%百分符格式化方法。Python官方最近逐步在推广str.format()方法的格式化。

fromat()方法是字符串的内置方法，其基本语法如下：

参数列表：[[fill]align][sign][#][0][width][,][.precision][type]

fill            【可选】空白处填充的字符

align           【可选】对齐方式（需配合width使用）


<，内容左对齐

>，内容右对齐(默认)

＝，内容右对齐，将符号放置在填充字符的左侧，且只对数字类型有效。 即使：符号+填充物+数字

^，内容居中


sign         【可选】有无符号数字
#            【可选】对于二进制、八进制、十六进制，如果加上#，会显示 0b/0o/0x，否则不显示


+，正号加正，负号加负；
 -，正号不变，负号加负；
空格 ，正号空格，负号加负；


，              【可选】为数字添加分隔符，如：1,000,000

width           【可选】格式化位所占宽度

.precision      【可选】小数位保留精度

type            【可选】格式化类型


传入” 字符串类型 “的参数：
s，格式化字符串类型数据
空白，未指定类型，则默认是None，同s


传入“ 整数类型 ”的参数：
b，将10进制整数自动转换成2进制表示然后格式化
c，将10进制整数自动转换为其对应的unicode字符
d，十进制整数
o，将10进制整数自动转换成8进制表示然后格式化；
x，将10进制整数自动转换成16进制表示然后格式化（小写x）
X，将10进制整数自动转换成16进制表示然后格式化（大写X）


传入“ 浮点型或小数类型 ”的参数：
e， 转换为科学计数法（小写e）表示，然后格式化；
E， 转换为科学计数法（大写E）表示，然后格式化;
f ， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；
F， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；
g， 自动在e和f中切换
G， 自动在E和F中切换

%，显示百分比（默认显示小数点后6位）
参数和用法很多，看得我都晕，全部记下来显然是没必要的，浪费脑细胞。

去除复杂的参数，简单的format格式化方法基本有两类：

1.{0}、{1}、{2}:这一类是位置参数，引用必须按顺序，不能随意调整，否则就乱了。例如：

tpl = "i am {0}, age {1}, really {0}".format("seven", 18)

2.{name}、{age}、{gender}：这一类是关键字参数，引用时必须以键值对的方式，可以随意调整顺序。例如：

tpl = "i am {name}, age {age}, really {name}".format(name="seven", age=18)

下面是一些具体的例子，可以参考使用：

tpl = "i am {}, age {}, {}".format("seven", 18, 'alex')

tpl = "i am {}, age {}, {}".format(*["seven", 18, 'alex'])

tpl = "i am {0}, age {1}, really {0}".format("seven", 18)

tpl = "i am {0}, age {1}, really {0}".format(*["seven", 18])

tpl = "i am {name}, age {age}, really {name}".format(name="seven", age=18)

tpl = "i am {name}, age {age}, really {name}".format(**{"name": "seven", "age": 18})

tpl = "i am {0[0]}, age {0[1]}, really {0[2]}".format([1, 2, 3], [11, 22, 33])

tpl = "i am {:s}, age {:d}, money {:f}".format("seven", 18, 88888.1)

tpl = "i am {:s}, age {:d}".format(*["seven", 18])

tpl = "i am {name:s}, age {age:d}".format(name="seven", age=18)

tpl = "i am {name:s}, age {age:d}".format(**{"name": "seven", "age": 18})

tpl = "numbers: {:b},{:o},{:d},{:x},{:X}, {:%}".format(15, 15, 15, 15, 15, 15.87623, 2)

tpl = "numbers: {:b},{:o},{:d},{:x},{:X}, {:%}".format(15, 15, 15, 15, 15, 15.87623, 2)

tpl = "numbers: {0:b},{0:o},{0:d},{0:x},{0:X}, {0:%}".format(15)

tpl = "numbers: {num:b},{num:o},{num:d},{num:x},{num:X}, {num:%}".format(num=15)
更多的用法，请参考官方文档https://docs.python.org/3/library/string.html

字符串颜色控制
有时候我们需要对有用的信息设置不同颜色来达到强调、突出、美观的效果，在命令行或linux终端中，颜色是用转义序列控制的，转义序列是以ESC开头，在代码中用\033表示(ESC的ASCII码用十进制表示就是27，等于用八进制表示的33，\0表示八进制)。注意：颜色控制只在终端界面中有效。

格式：\033[显示方式;前景色;背景色m正文\033[0m

前景色	背景色	颜色
30	40	黑色
31	41	红色
32	42	绿色
33	43	黃色
34	44	蓝色
35	45	紫红色
36	46	青蓝色
37	47	白色
显示方式：

显示方式	意义
0	终端默认设置
1	高亮显示
4	使用下划线
5	闪烁
7	反白显示
8	不可见
例子：

\033[1;31;40m 1-高亮显示 31-前景色红色 40-背景色黑色

\033[0m 采用终端默认设置，也就是取消颜色设置

比如下面的代码：

import time

print('\033[1;31m')
print('登录信息'.center(46, "*"), "\033[0m")
print('\033[34m*HOST:\t', "192.168.1.10")
print('*PORT:\t', "80")
print('*User:\t', "jack")
print('*TIME:\t', time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
print('\033[1;31m*' * 50, '\033[0m')
print("\033[32m欢迎登录！\033[0m")
效果如下图：

image.png-55.1kB

字符编码
计算机只能处理数字01，如果要处理文本，就必须先把文本转换为数字01，这种转换方式就称为字符编码。

对于我们而言，你只需要简单记住下面几种编码就好：

ASCII编码：早期专门为英语语系编码，只有255个字符，每个字符需要8位也就是1个字节。不兼容汉字。

Unicode编码：又称万国码，国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。用2个字节来表示汉字。

UTF-8编码：为了节省字节数，在Unicode的基础上进行优化的编码。用1个字节表示英文字符，3个字符表示汉字。天生兼容ASCII编码，所以最为流行。

GB2312：我国早期自己制定的中文编码，世界范围内不通用。

GBK： 全称《汉字内码扩展规范》，向下与GB2312兼容，向上支持ISO10646.1国际标准，是前者向后者过渡过程中的一个承上启下的产物。windows中文版的汉字编码用的就是GBK。也非世界范围通用的编码

其它编码：非以上类型者的统称。属于能不用就不要碰的编码。

最后再强调一次，Python3在运行时全部使用Unicode编码!

另外有这么几条规则，你要记住：

操作系统运行时，在内存中，统一使用的都是Unicode编码，当需要将数据保存到硬盘或者网络传输的时候，就转换为UTF-8编码，进行保存和传输。

用文本编辑器的时候，从文件系统或者说硬盘上读取的UTF-8编码字符被转换为Unicode字符到内存里，供程序或者操作系统使用。编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。

浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8传输到客户的浏览器。

这就是为什么我们一会说Unicode，一会又用utf-8的原因。

另外，一定要区分代码自己本身的编码和程序要处理的数据的编码！没有特殊要求的情况，请使用utf-8编码。确保文本编辑器使用的是UTF-8 without BOM编码。

 元组 字典
评论总数： 9
点击登录后方可评论
user_image
在cmd命令下运行 print("\a") 会有提示音，但是pycharm下面没有声音


By   我是陈独秀我还想发言    On   2018年12月15日 14:59   回复

user_image
lower 和upper是对字符串大小写全部转化，有没有专门针对某个特殊字符转化的函数除了replace


By   我是陈独秀我还想发言    On   2018年12月15日 14:52   回复

user_image
列表还要区分安全和不安全方法，字符串不用，哈哈。 感谢博主！


By   了繁精彩    On   2018年10月27日 16:36   回复

user_image
字符串内置方法中string.maketrans(intab, outtab])后面多了一个中括号。


By   一年一月一日一时_45749    On   2018年8月9日 11:00   回复

user_image
博主编码这块讲的太棒了！


By   唯J王道    On   2018年4月26日 23:01   回复

user_image
文中把“下标”错写成“下表”；在字符串运算表中，“a[1]”错写成“a1”（此处的1居然可以点击）！


By   蔷薇-Nina    On   2018年4月9日 18:10   回复

user_image
能点击，这不是问题。囧


蔷薇-Nina   回复   蔷薇-Nina 2018年4月9日 18:18   回复

user_image
Python+Django教程超过一百万字，都是我个人原创的。其中出现笔误或排版错误，实属难免，敬请原谅。


 博主   回复   蔷薇-Nina 2018年4月10日 10:07   回复

user_image
认真阅读，仔细阅读，发现错误，提出建议等等，这些都是对博主的劳动成果的最大尊敬。再次感谢博主的优秀教程！


蔷薇-Nina   回复    博主 2018年4月10日 14:23   回复

Copyright © 2019.刘江的官方网站
托管于阿里云
京ICP备17055098号
京公网安备11010102002019号
返回首页
关于博主
联系方式
